name: assignment3

on:
  push:
    branches: [ "submission3", "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log workflow start
        run: printf "%s\n" "$(date -Iminutes)" >> log.txt

      - name: Log submitter name
        run: printf "Felix Schick\n" >> log.txt

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image and Export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.assignment3
          tags: meals-api:v3
          outputs: type=docker,dest=/tmp/meals-api.tar

      - name: Check and log build status
        id: check_status
        run: |
          if ${{ steps.docker_build.outcome == 'success' }}
          then
          printf "image successfully built" >> log.txt
          else
          printf "image not able to be built" >> log.txt
          fi

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: meals-api
          path: /tmp/meals-api.tar

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: ./log.txt


  test:
    needs: build
    runs-on: ubuntu-latest
#   services:
#      db:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: dishes
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download logfile
        uses: actions/download-artifact@v2
        with:
          name: log
          path: ./

      - name: Set .env file
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo NINJAS_API_KEY=${{ secrets.NINJAS_API_KEY }} >> .env
          echo NINJAS_API_BASE_URL=${{ secrets.NINJAS_API_BASE_URL }} >> .env

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: meals-api
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/meals-api.tar

      - name: Run Docker Compose
        run: docker-compose -f docker-compose.assn3.yml up -d

      - name: Wait for container to start
        run: sleep 5

      - name: Check container is running
        run: docker ps

      - name: Check if api is running
        run: curl localhost:8000 && printf "Container up and running\n" >> log.txt || printf "Container failed to run\n" >> log.txt

      - name: Install pytest & requests
        run: |
          pip install pytest
          pip install requests

      - name: Run tests
        run: pytest -v tests/assn3_tests.py > assn3_test_results.txt && printf "tests succeeded\n" >> log.txt || printf "tests failed\n" >> log.txt

      - name: Upload Test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test_results
          path: ./assn3_test_results.txt

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
#    services:
#      db:
#        image: postgres:latest
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: password
#          POSTGRES_DB: dishes
#        ports:
#          - 5432:5432
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set .env file
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo NINJAS_API_KEY=${{ secrets.NINJAS_API_KEY }} >> .env
          echo NINJAS_API_BASE_URL=${{ secrets.NINJAS_API_BASE_URL }} >> .env

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: meals-api
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/meals-api.tar

      - name: Run Docker Compose
        run: docker-compose -f docker-compose.assn3.yml up -d

      - name: Wait for container to start
        run: sleep 5

      - name: Run queries
        run: |
          while IFS= read -r dish
          do
            echo "Dish: $dish"
            post_response=$(curl -X POST http://localhost:8000/dishes --data "{\"name\": \"$dish\"}")
            echo "Post Response: $post_response"
            response=$(curl -X GET http://localhost:8000/dishes/$dish)
          
            
            echo "Response: $response"  # Debug line


            # Parse the response
            calories=$(echo "$response" | jq '.cal')
            sodium=$(echo "$response" | jq '.sodium')
            sugar=$(echo "$response" | jq '.sugar')
          
            # Write to the response file
            printf "$dish contains $calories calories, $sodium mgs of sodium, and $sugar grams of sugar\n" >> response.txt
          done < query.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: ./result.txt
