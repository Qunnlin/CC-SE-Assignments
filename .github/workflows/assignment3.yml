name: assignment3

on:
  push:
    branches:
      - [ "submission3", "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dishes
        ports:
          - 5432:5432


    steps:
      - name: Log workflow start
        run: echo date -Iminutes >> log.txt
      - name: Log submitter name
        run: echo "Felix Schick" >> log.txt

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build the Docker image
        run: docker build . --file Dockerfile.assignment3 --tag meals-api && echo "image successfully built" >> log.txt || echo "image not able to be built" >> log.txt

      - name: Save Docker image
        run: docker save meals-api > /tmp/meals-api.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: meals-api
          path: /tmp/meals-api.tar

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: log.txt


  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dishes
        ports:
          - 5432:5432


    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download logfile
        uses: actions/download-artifact@v2
        with:
          name: log
          path: log.txt

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: meals-api
          path: /tmp

      - name: Load Docker image
        run: docker load < /tmp/meals-api.tar

      - name: Run container
        run: docker run -d --name meals-api -p 8000:8000 meals-api && echo "Container up and running" >> log.txt || echo "Container failed to run" >> log.txt

      - name: Wait for container to start
        run: sleep 5

      - name: Run tests
        run: pytest -v tests/assn3_tests.py > assn3_test_results.txt && echo "tests succeeded" >> log.txt || echo "tests failed" >> log.txt

      - name: Upload Test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test_results
          path: assn3_test_results.txt

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: meals-api
          path: /tmp

      - name: Load Docker image
        run: docker load < /tmp/meals-api.tar

      - name: Run container
        run: docker run -d --name meals-api -p 8000:8000 meals-api

      - name: Wait for container to start
        run: sleep 5

      - name: Run queries
        run: |
          while IFS= read -r food_item
          do
            # Replace with your specific POST and GET requests
            curl -X POST http://localhost:8000/dishes --data "{\"name\": \"$food_item\"}
            response=$(curl -X GET http://localhost:8000/dishes/$food_item)
          
            # Parse the response
            calories=$(echo "$response" | jq '.calories')
            sodium=$(echo "$response" | jq '.sodium')
            sugar=$(echo "$response" | jq '.sugar')
          
            # Write to the response file
            echo "$food_item contains $calories calories, $sodium mgs of sodium, and $sugar grams of sugar" >> response.txt
          done < query.txt

      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: result.txt
