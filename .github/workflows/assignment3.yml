name: assignment3

on:
  push:
    branches: [ "submission3", "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log workflow start
        run: printf "%s\n" "$(date -Iminutes)" >> log.txt

      - name: Log submitter name
        run: printf "Felix Schick\n" >> log.txt

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image and Export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.assignment3
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/meals-api:latest

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: meals-api
          path: /tmp/meals-api.tar

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: ./log.txt


  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dishes
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      meals-api:
        image: qunnlin/meals-api:latest
        env:
          NINJAS_API_KEY: ${{ secrets.NINJAS_API_KEY }}
          NINJAS_API_BASE_URL: ${{ secrets.NINJAS_API_BASE_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          MEALS_SERVICE_URL: ${{ secrets.MEALS_SERVICE_URL }}
          DIETS_SERVICE_URL: ${{ secrets.DIETS_SERVICE_URL }}


    steps:

      - name: Check Service is running
        run: docker ps

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download logfile
        uses: actions/download-artifact@v2
        with:
          name: log
          path: ./

#      - name: Download Docker image
#        uses: actions/download-artifact@v3
#        with:
#          name: meals-api
#          path: /tmp

#      - name: Load Docker image
#        run: docker load --input /tmp/meals-api.tar

#      - name: Run container
#        run: docker run -d --name meals-api -p 8000:8000 --net=host -e NINJAS_API_KEY=$NINJAS_API_KEY -e NINJAS_API_BASE_URL=$NINJAS_API_BASE_URL -e DATABASE_URL=$DATABASE_URL -e MEALS_SERVICE_URL=$MEALS_SERVICE_URL -e DIETS_SERVICE_URL=$DIETS_SERVICE_URL meals-api && printf "Container up and running\n" >> log.txt || printf "Container failed to run\n" >> log.txt

#      - name: Wait for container to start
#        run: sleep 10

#      - name: Check container is running
#        run: docker ps

      - name: Log container health
        run: docker logs meals-api

#      - name: Check if api is running
#        run: curl localhost:8000

      - name: Install pytest & requests
        run: |
          pip install pytest
          pip install requests

      - name: Run tests
        run: pytest -v tests/assn3_tests.py > assn3_test_results.txt && printf "tests succeeded\n" >> log.txt || printf "tests failed\n" >> log.txt

      - name: Upload Test results
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: test_results
          path: ./assn3_test_results.txt

      - name: Upload logfile
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: log
          path: log.txt

  query:
    needs: test
    runs-on: ubuntu-latest
    env:
      NINJAS_API_KEY: ${{ secrets.NINJAS_API_KEY }}
      NINJAS_API_BASE_URL: ${{ secrets.NINJAS_API_BASE_URL }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      MEALS_SERVICE_URL: ${{ secrets.MEALS_SERVICE_URL }}
      DIETS_SERVICE_URL: ${{ secrets.DIETS_SERVICE_URL }}
    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: dishes
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: meals-api
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/meals-api.tar

      - name: Run container
        run: docker run -d --name meals-api -p 8000:8000 -net=host -e NINJAS_API_KEY=$NINJAS_API_KEY -e NINJAS_API_BASE_URL=$NINJAS_API_BASE_URL -e DATABASE_URL=$DATABASE_URL -e MEALS_SERVICE_URL=$MEALS_SERVICE_URL -e DIETS_SERVICE_URL=$DIETS_SERVICE_URL meals-api && printf "Container up and running\n" >> log.txt || printf "Container failed to run\n" >> log.txt

      - name: Wait for container to start
        run: sleep 10

      - name: Run queries
        run: |
          while IFS= read -r food_item
          do
            # Replace with your specific POST and GET requests
            curl -X POST http://localhost:8000/dishes --data "{\"name\": \"$food_item\"}"
            response=$(curl -X GET http://localhost:8000/dishes/$food_item)
          
            # Parse the response
            calories=$(echo "$response" | jq '.calories')
            sodium=$(echo "$response" | jq '.sodium')
            sugar=$(echo "$response" | jq '.sugar')
          
            # Write to the response file
            printf "$food_item contains $calories calories, $sodium mgs of sodium, and $sugar grams of sugar\n" >> response.txt
          done < query.txt

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: ./result.txt
